var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage-and-Examples","page":"Usage and Examples","title":"Usage and Examples","text":"","category":"section"},{"location":"usage/","page":"Usage and Examples","title":"Usage and Examples","text":"This page demonstrates a basic usage of the package. To see all functionalities head to the API documentation","category":"page"},{"location":"roadmap/#Roadmap","page":"Roadmap","title":"Roadmap","text":"","category":"section"},{"location":"roadmap/","page":"Roadmap","title":"Roadmap","text":"MINDFul.jl is an effort meant to help parties interested in the reasearch of intent-driven network coordination. Future additions are going to be determined by our research directions. However the following consitute a list of plans that are irrelevant to research purposes","category":"page"},{"location":"roadmap/","page":"Roadmap","title":"Roadmap","text":"complete substitution of MetaGraphs by MetaGraphsNext\ncomplete integration of Term.jl\ndefinition of line rate units with Unitful.jl\ncompanion package MINDFulCompanion.jl for better demonstration ","category":"page"},{"location":"#MINDFul.jl","page":"Introduction","title":"MINDFul.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"MINDFul.jl is a Framework for Intent-driven Multi-Domain Networks coordination. It provides the means for algorithmic research in the field of IP-Optical networking. It includes a stateful representation of common networking equipment and facilitates event-based simulations.","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [MINDFul]\nPrivate = false\nOrder   = [:function, :type]","category":"page"},{"location":"API/#MINDFul.addintent!-Tuple{IBN, Intent}","page":"API","title":"MINDFul.addintent!","text":"addintent!(ibn::IBN, intent::Intent) -> Int64\n\n\nAdd intent to ibn as Network Operator. Returns the intent id.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.addintent!-Tuple{MINDFul.IBNIssuer, IBN, Intent}","page":"API","title":"MINDFul.addintent!","text":"Add InterIBN-Intent as IBN2IBN, customer2provider\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deploy!-Tuple{IBN, IBN, MetaGraphsNext.MetaDiGraph{Int64, Base.UUID, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, IntentDAGNode, Nothing, MINDFul.IntentDAGInfo, MetaGraphsNext.var\"#3#5\", Float64}, IntentDAGNode, IntentTransition, MINDFul.IBNModus, Any}","page":"API","title":"MINDFul.deploy!","text":"ibn-customer accesses the intent state machine of ibn-provider\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deploy!-Tuple{IBN, IBN, MetaGraphsNext.MetaDiGraph{Int64, Base.UUID, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, IntentDAGNode, Nothing, MINDFul.IntentDAGInfo, MetaGraphsNext.var\"#3#5\", Float64}, IntentDAGNode, IntentTransition, MINDFul.IBNModus}","page":"API","title":"MINDFul.deploy!","text":"No algmethod provided\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deploy!-Tuple{IBN, Int64, Vararg{Any}}","page":"API","title":"MINDFul.deploy!","text":"Assume intent is root of DAG\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deploy!-Tuple{IBN, MetaGraphsNext.MetaDiGraph{Int64, Base.UUID, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, IntentDAGNode, Nothing, MINDFul.IntentDAGInfo, MetaGraphsNext.var\"#3#5\", Float64}, Vararg{Any}}","page":"API","title":"MINDFul.deploy!","text":"Assume intent comes from Network Operator\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.edgeify-Tuple{Any}","page":"API","title":"MINDFul.edgeify","text":"Converts a node path to a sequence of edges\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.issatisfied-Tuple{IBN, Int64}","page":"API","title":"MINDFul.issatisfied","text":"onlylogic is WIP\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.issatisfied-Union{Tuple{I}, Tuple{IBN, MetaGraphsNext.MetaDiGraph{Int64, Base.UUID, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, IntentDAGNode, Nothing, MINDFul.IntentDAGInfo, MetaGraphsNext.var\"#3#5\", Float64}, IntentDAGNode{I}}} where I<:Intent","page":"API","title":"MINDFul.issatisfied","text":"check if the path makes sense and the constraints are satisfied\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.issatisfied-Union{Tuple{K}, Tuple{Vector{MINDFul.IBNnIntentGLLI}, Vector{K}, CapacityConstraint}} where K<:Union{Missing, MINDFul.ConnectionState}","page":"API","title":"MINDFul.issatisfied","text":"Low Level Intents are assumed to be installed now\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.issatisfied-Union{Tuple{K}, Tuple{Vector{MINDFul.IBNnIntentGLLI}, Vector{K}, DelayConstraint}} where K<:Union{Missing, MINDFul.ConnectionState}","page":"API","title":"MINDFul.issatisfied","text":"Low Level Intents are assumed to be installed now\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.remintent!-Tuple{IBN, Int64}","page":"API","title":"MINDFul.remintent!","text":"remintent!(ibn::IBN, idi::Int64) -> Bool\n\n\nRemove intent with id idi from ibn. Returns true if successful.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.remintent!-Tuple{MINDFul.IBNIssuer, IBN, Int64}","page":"API","title":"MINDFul.remintent!","text":"Removes all intents made from this issuer combination\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.simgraph-Tuple{MetaGraphs.MetaDiGraph}","page":"API","title":"MINDFul.simgraph","text":"Builds a simulated graph  Give in a MetaGraph having:\n\n:routerports as integer in every node\n:xcoord as integer in every node\n:ycoord as integer in every node\n:oxc as boolean in every node\n:fiberslots as int in every link\n\nGet as an output a MetaGraph having:\n\n:xcoord as integer in every node\n:ycoord as integer in every node\n:router as RouterView in every node\n:link as FiberView in every edge\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.transnodes-Tuple{IBN}","page":"API","title":"MINDFul.transnodes","text":"returns trans nodes of the IBN in the format of (IBN id, node id)\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.ConnectivityIntent","page":"API","title":"MINDFul.ConnectivityIntent","text":"struct ConnectivityIntent{C, R} <: Intent\n\nsrc::Tuple{Int64, Int64}: Source node as (IBN.id, node-id)\ndst::Tuple{Int64, Int64}: Destination node as (IBN.id, node-id)\nconstraints::Any: Intents constraints\nconditions::Any: Intents conditions\n\nIntent for connecting 2 nodes\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IBN","page":"API","title":"MINDFul.IBN","text":"struct IBN{T<:SDN}\n\nid::Int64: id of IBN\nintents::Vector{MetaGraphsNext.MetaDiGraph{Int64, Base.UUID, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, IntentDAGNode, Nothing, MINDFul.IntentDAGInfo, MetaGraphsNext.var\"#3#5\", Float64}}: The intent collection of the IBN Framework\nintentissuers::Vector{MINDFul.IntentIssuer}\ncontrollers::Array{Union{IBN, T}, 1} where T<:SDN: The collection of SDNs controlled from this IBN Framework and interacting IBNs (future should be IBN-NBIs)\nngr::NestedGraphs.NestedMetaGraph{Int64, MetaGraphs.MetaDiGraph{Int64, Float64}, MetaGraphs.MetaDiGraph{Int64, Float64}}: Nested Graph consisting of the several SDNs ngr is a shallow copy of the sdn graphs, meaning all PHY information is available in the IBN\n\ninterprops::Dict{Int64, MINDFul.IBNInterProps}: InterIBN interoperability with key being the IBN id\n\nThe Intent Framework The intent id is the vector index controllers must have same length with ngr.grv\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IBN-Union{Tuple{T}, Tuple{Int64, Type{T}}} where T<:SDN","page":"API","title":"MINDFul.IBN","text":"Empty constructor\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.IntentDAGNode","page":"API","title":"MINDFul.IntentDAGNode","text":"mutable struct IntentDAGNode{T<:Intent, L<:MINDFul.LogState}\n\nintent::Intent\nstate::IntentState\nid::Base.UUID\nlogstate::MINDFul.LogState\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.SDNdummy","page":"API","title":"MINDFul.SDNdummy","text":"A dummy SDN controller to use for research and experiment purposes. This SDN controller is directly connected with the simulated physical layer network resources SimNetResou.jl\n\ngr::MetaGraphs.MetaDiGraph{T} where T: network of SDN\ninterprops::Dict{NestedGraphs.NestedEdge, Dict{Symbol, Any}}: inter domain equipment(e.g. links)\n\n\n\n\n\n","category":"type"},{"location":"API/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"}]
}
